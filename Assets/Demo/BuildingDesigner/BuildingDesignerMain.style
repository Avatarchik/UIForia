// ------------------ MAIN ------------------ 
//TODO: tooltips on brush-images (with cost)
//TODO: grid with buttons doesn't stretch vertically

import "Demo/Theme.style" as theme;

const durationBase = 100;
const durationDialog = 500;

const backgroundColor = rgb(253, 253, 253);
const brushButtonSize = 190px;

animation button-normal {
    [options] {
        duration = @durationBase;
    }

    [keyframes] {
        100% {
            BackgroundColor = #C8C8C8;
            BorderColor = #C8C8C8;
        }
    }
}

animation button-hover {
    [options] {
        duration = @durationBase;
    }

    [keyframes] {
        100% {
            BackgroundColor = #fff;
            BorderColor = black;
        }
    }
}

animation dialog-button-normal {
    [options] {
        duration = @durationBase;
    }
        
    [keyframes] {
        0% {
            Border = 5px;
        }
        100% {
            Border = 0px;
        }
    }
}

animation dialog-button-hover {
    [options] {
        duration = @durationBase;
    }
    
    [keyframes] {
        0% {
            Border = 0px; 
        }
        100% {
            Border = 5px;
        }
    }
}

animation open-dialog {
    [options] {
        duration = @durationDialog;
        timingFunction = CubicEaseInOut;
    }
    
    [keyframes] {
        0% {
            TransformPositionY = 500px;
        }
        
        100% {
            TransformPositionY = 0px;
        }
    }
}

animation close-dialog {
    [options] {
        duration = @durationDialog;
        timingFunction = CubicEaseInOut;
    }
    
    [keyframes] {
        0% {
            TransformPositionY = 0px;
        }
        
        100% {
            TransformPositionY = 500px;
        }
    }
}

style dialog {
    BackgroundColor = rgba(0, 0, 0, 250);
    TextColor = white;
    
    TextFontStyle = UpperCase;
    
    LayoutBehavior = Ignored;
    
    PreferredSize = 1pca;
    
    TransformBehaviorY = AnchorMinOffset;
    TransformPositionY = 600px;
    
    FlexLayoutDirection = Row;
    FlexLayoutMainAxisAlignment = Center;
    FlexLayoutCrossAxisAlignment = Center;
}

style dialog-title {
    TextFontSize = 25px;
}

style dialog-buttons {
    MarginTop = 10px;
    MarginBottom = 10px;
    
    PreferredSize = 1cnt;
    
    FlexLayoutDirection = Row;
    FlexLayoutMainAxisAlignment = Center;
}

style dialog-button {
    TextFontSize = 35px;
    
    PreferredSize = 120px;
    BorderRadius = 60px;
    
    Margin = 15px;
    
    FlexLayoutMainAxisAlignment = Center;
    FlexLayoutCrossAxisAlignment = Center;
    
    BorderColor = white;
    
    run animation(dialog-button-normal);
    [hover] {
        run animation(dialog-button-hover);
    }
}

style building-designer-main {
    BackgroundColor = @backgroundColor;
    PreferredWidth = 1pca;
    FlexItemGrow = 1;
    FlexItemShrink = 1;
    FlexLayoutDirection = Row;
    FlexLayoutCrossAxisAlignment = Stretch;
    GridLayoutColAlignment = Fit;
    GridLayoutRowAlignment = Fit;
    PreferredHeight = 100%;
}

style tools-area {
    Padding = 15px;
}

style previews-area {
    Padding = 10px;
    FlexItemGrow = 1;
    FlexItemShrink = 1;
    LayoutFitHorizontal = Fill;
    LayoutFitVertical = Fill;
}

style grid-with-buttons {
    LayoutType = Grid;
    GridLayoutDirection = Horizontal;
    GridLayoutColTemplate = 64px 64px;
    GridLayoutRowAutoSize = 64px;
    GridLayoutColAlignment = Center;
    GridLayoutRowAlignment = Center;
}

style tools-button {
    PreferredSize = 50px;
    BackgroundColor = @theme.lightGrey;
    FlexLayoutCrossAxisAlignment = Center;
    FlexLayoutMainAxisAlignment = Center;
    
    [active] {
        BackgroundColor = black;
    }
}

// Ignore this element and treat it's children as the parent's.
style transclude-children {
    LayoutBehavior = TranscludeChildren;
}

style tools-active-button {
    BackgroundColor = black;
}

style color-preview {
    BorderRadius = 50px;
    Border = 2px;
    BorderColor = black;
}

style color-palette {
    PreferredSize = 1cnt;
    
    BackgroundColor = black;
    
    LayoutBehavior = Ignored;
    
    TransformBehaviorX = AnchorMaxOffset;
    TransformPositionX = -1.05w;
    
    ZIndex = 4;
}

style color-selection-container {
    LayoutType = Grid;
    GridLayoutColTemplate = 40px 40px 40px 40px 40px 40px 40px 40px;
    GridLayoutColGap = 2;
    
    Border = 2px;
    BorderColor = black;
}

style palette-item {
    PreferredSize = 40px;
    
    Border = 0px;
    BorderColor = black;
    
    [hover] {
        Border = 4px;
        BorderColor = white;
    }
}

style transclude {
    LayoutBehavior = TranscludeChildren;
} 


style grid-with-brushes {
    FlexLayoutWrap = Wrap;
    FlexLayoutDirection = Horizontal;
    PreferredWidth = 100%;
    LayoutFitHorizontal = Fill;
    Padding = 10px;
}

style brush-button {
    TextColor = @theme.lightGrey;
    PreferredWidth = @brushButtonSize;
    Padding = 4px;  
    MarginRight = 10px;
    MarginBottom = 20px;

    BorderRadius = 10px;

    FlexLayoutCrossAxisAlignment = Center;
    FlexLayoutMainAxisAlignment = Center;
    
    MinWidth = @brushButtonSize;
    Border = 2px;
    
    run animation(button-normal);
    
    [hover] {
        run animation(button-hover);
    }
}

style image-width {
    PreferredSize = @brushButtonSize;
}

style brush-label {
    //MaxWidth = 180px;
    MarginBottom = 10px;
}

style remove-button {
    LayoutBehavior = Ignored;
    AnchorRight = 8px;
    AnchorTop = 8px;
    TransformBehaviorX = AnchorMaxOffset;
    TransformBehaviorY = AnchorMinOffset;
    
    BorderRadius = 20px;
    
    BackgroundColor = @theme.darkGrey;
    
    TextColor = white;
    TextFontSize = 18px;

    [hover] {
        BackgroundColor = red;
    }
    [active] {
        BackgroundColor = rgb(150, 0, 0);
    }
}

style plus-sign {
    BackgroundColor = rgb(230,230,230);
    PreferredSize = 80px;
}