export const lightButtonHover = rgba(235, 235, 230, 255);
export const blackButtonHover = rgba(20, 20, 20, 255);
export const lightBlue = rgb(0, 181, 217);
export const darkTextColor = rgb(51, 51, 51);
export const darkGrey = rgb(51, 51, 51);
export const lightGrey = rgb(100, 100, 100);
export const lighterGrey = rgb(153, 153, 153);
export const mediumGreen = rgb(2, 209, 116);

export const whiteHover = rgba(200, 200, 200, 255);
export const whiteFocus = rgba(210, 210, 210, 255);
export const whiteActive = rgba(150, 150, 150, 255);
export const whiteDisabled = rgba(150, 150, 150, 255);

export const warningRed = rgba(150, 20, 20, 120);
export const warningRedBorder = rgba(150, 20, 20, 255);

export const darkBackground = rgba(0, 0, 0, 200);
export const cursorDefault = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_default");
export const cursorTextInput = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_text_input");
export const cursorBuildingModePaint = url("icons/modes/paint/paint-brush");
export const cursorBuildingModeFill = url("icons/modes/paint/paint-fill");
export const cursorBuildingModePick = url("icons/modes/paint/paint-pick");
export const cursorBuildingModeSelection = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_rect_marquee");
export const cursorFarmMode = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_rect_marquee");
export const cursorMove = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_move");
export const cursorClickable = url("Client/UI/Sprites/Cursors/ui_mouse_cursor_blue");

export const confirmColor = rgb(100, 205, 125);
export const saveExitColor = rgb(85, 179, 213);
export const cancelColor = rgb(255, 30, 30);

const durationDialog = 500;

export const fontInputSansCompressed = url("Fonts/InputSansCompressed-Regular SDF");
export const fontInputSansCompressedBlack = url("Fonts/InputSansCompressed-Black SDF");
export const fontInputSansMedium = url("Fonts/InputSans-Medium SDF");
export const fontInputSansBold = url("Fonts/InputSans-Bold SDF");
export const fontGothamNarrow = url("Fonts/GothamNarrow-Medium SDF");
export const fontGothamRnd = url("Fonts/GothamRnd-Medium SDF");
export const fontGothamLight = url("Fonts/Gotham-Light SDF");
export const fontGothamRndBold = url("Fonts/GothamRnd-Bold SDF");
export const fontGothamBold = url("Fonts/Gotham-Bold SDF");
export const fontGothamBook = url("Fonts/Gotham-Book SDF");
export const fontGothamMedium = url("Fonts/Gotham-Medium SDF");
export const fontEuroBold = url("Fonts/EurostileLTPro-BoldEx2 SDF");
export const fontEuro = url("Fonts/EurostileLTPro SDF");

const topBarFramePad = 0.7em;
const topBarTextSize = 12px;
const iconSize = 30px;

style confirm-color { BackgroundColor = @confirmColor; }
style save-exit-color { BackgroundColor = @saveExitColor; }
style cancel-color { BackgroundColor = @cancelColor; }
style color-grey { BackgroundColor = @lightGrey; }

style confirm-text-color { TextColor = @confirmColor; }
style save-exit-text-color { TextColor = @saveExitColor; }
style cancel-text-color { TextColor = @cancelColor; }

style fake-select {
    PreferredSize = 1cnt 1mn;
    LayoutType = Stack;
    BackgroundColor = White;
    PaddingRight = 24px;
}

style fake-select-display {
//    Border = 2px;
//    BorderColor =  #b2b2b2;
//    BorderRadius = 14px 0 0 14px;
//    TextFontSize = 1em;
//    //Padding = 6px 8px;
//    PreferredSize = 1cnt 48px;
//    FlexLayoutMainAxisAlignment = Center;
//   
//    [hover] {
//        BorderColor = #00b5d9;
//    }
      BackgroundColor = Yellow;

}

style fake-select-chevron-holder {
    LayoutBehavior = Ignored;
    AlignmentBehaviorX = Parent;
    AlignX = 100%;
    BackgroundColor = #00b5d0;
    PreferredSize = 24px 100%;
    BorderColor = #006d82;
    BorderRadius = 0 24px 24px 0;
    Border = 1px;
  //  PreferredSize = 32px, 100%;
  //  FlexLayoutMainAxisAlignment = SpaceAround;
  //  FlexLayoutCrossAxisAlignment = Center;
  //  FlexLayoutDirection = Row;
//        PreferredSize = 200px;
//        BackgroundColor = Blue;
//          AlignmentBehaviorX = LayoutBox;
//          AlignmentBehaviorY = LayoutBox;
//            AlignX = 50%;
//            AlignY = 50%;

}

style fake-select-options {
    Visibility = Hidden;
//    PreferredSize = 100px;
//    BackgroundColor = Red;
//    AlignmentBehaviorX = LayoutBox;
//    AlignmentBehaviorY = LayoutBox;
//    AlignX = 100%;
//    AlignY = 100%;
   
}

animation open-shortcuts {
    [options] {
        duration = @durationDialog;
        timingFunction = CubicEaseInOut;
    }
    
    [keyframes] {
        0% {
            TransformPositionY = 450px;
        }
        
        100% {
            TransformPositionY = 30px;
        }
    }
}

animation close-shortcuts {
    [options] {
        duration = @durationDialog;
        timingFunction = CubicEaseInOut;
    }
    
    [keyframes] {
        0% {
            TransformPositionY = 30px;
        }
        
        100% {
            TransformPositionY = 450px;
        }
    }
}

style screen-bottom-right {
    LayoutBehavior = Ignored;
    AnchorBottom = 0;
    AnchorRight = 0;
    TransformBehaviorX = AnchorMaxOffset;
    TransformBehaviorY = AnchorMaxOffset;
}

style building-designer-root {
    PreferredSize = 1024px 512px;
    
    BackgroundColor = rgb(255, 0, 0);
    
    TextFontAsset = @fontGothamBold;
    
    LayoutType = Grid;
    GridLayoutRowTemplate = 1mx 1mx 1fr;
    GridLayoutColTemplate = 1mx;
    GridLayoutColAlignment = Start;
    Cursor = @cursorDefault;
}

style select-height {
    PreferredWidth = 400px;
}

style building-designer-help {
    LayoutBehavior = Ignored;

    BackgroundColor = rgba(0,0,0,250);
    TextColor = rgb(200, 200, 200);

    PreferredHeight = 450px;
    PreferredWidth = 330px;
    
    BorderRadius = 10px;
    
    MarginRight = 20px;
    
    TransformPositionY = 450px;
    TransformPositionX = -360px;
    Border = 0px;
    
    [hover] {
        Border = 2px;
        BorderColor = lightGrey;
    }
}

style building-designer-top-bar {
    BackgroundColor = rgb(239, 239, 239);
    
    TextColor = @darkGrey;
    TextTransform = UpperCase;
    TextFontSize = 1.1em;
    
    FlexLayoutDirection = Horizontal;
    FlexLayoutCrossAxisAlignment = Center;
    FlexLayoutMainAxisAlignment = Start;
        
    BorderBottom = 3px;
    BorderColor = rgb(175, 175, 175);
    
    Padding = @topBarFramePad;
    PaddingLeft = 1.2em;
    
    PreferredSize = 1psz, 64px;
}