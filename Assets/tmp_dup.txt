// SimpleTemplate.xml
new UIForia.Compilers.TemplateData ("SimpleTemplate") {
    entry = (UIForia.ElementSystem system) => {
        TemplateCompiler2Test.TestTemplateCompiler2.SimpleTemplate element;
        UIForia.Compilers.TemplateData data;
        UIForia.Compilers.TemplateScope2 scope;

        data = system.GetTemplateData(typeof(TemplateCompiler2Test.TestTemplateCompiler2.SimpleTemplate));
        element = new TemplateCompiler2Test.TestTemplateCompiler2.SimpleTemplate();
        scope = new UIForia.Compilers.TemplateScope2(system, data, element, default(UIForia.Compilers.SlotOverride[]));
        system.InitializeEntryPoint(element, 2, 4);
        system.InitializeStaticAttribute(element, @"x", @"x");
        system.InitializeStaticAttribute(element, @"y", @"y");
        data.hydrate(system, element, default(UIForia.Compilers.SlotOverride[]));
        return element;
    },
    hydrate = (UIForia.ElementSystem system, UIForia.Elements.UIElement element, UIForia.Compilers.SlotOverride[] overrides) => {
        UIForia.Compilers.TemplateData data;
        UIForia.Compilers.TemplateScope2 scope;

        data = system.GetTemplateData(typeof(TemplateCompiler2Test.TestTemplateCompiler2.SimpleTemplate));
        scope = new UIForia.Compilers.TemplateScope2(system, data, element, overrides);
        system.AddChild(scope, element, 0);        // Div;
        system.AddChild(scope, element, 1);        // Panel;
        system.AddChild(scope, element, 2);        // Group;
        system.AddSlotChild(element, scope, @"someslot", 0);
    },
    elements = new System.Func<UIForia.Compilers.TemplateScope2, UIForia.Elements.UIElement, UIForia.Elements.UIElement>[] {
        //0 <Div> line 3:10
        (UIForia.Compilers.TemplateScope2 scope, UIForia.Elements.UIElement parent) => {
            UIForia.Elements.UIDivElement element;

            element = new UIForia.Elements.UIDivElement();
            scope.system.InitializeElement(scope, parent, element, 0, 1);
            scope.system.AddChild(scope, element, 1);            // Panel;
            return element;
        },
        //1 <Panel> line 4:14
        (UIForia.Compilers.TemplateScope2 scope, UIForia.Elements.UIElement parent) => {
            UIForia.Elements.UIPanelElement element;

            element = new UIForia.Elements.UIPanelElement();
            scope.system.InitializeElement(scope, parent, element, 0, 1);
            scope.system.AddChild(scope, element, 3);            // ExpandedTemplate;
            return element;
        },
        //2 <Group> line 13:10
        (UIForia.Compilers.TemplateScope2 scope, UIForia.Elements.UIElement parent) => {
            UIForia.Elements.UIGroupElement element;

            element = new UIForia.Elements.UIGroupElement();
            scope.system.InitializeElement(scope, parent, element, 0, 0);
            return element;
        },
        //3 <ExpandedTemplate> line 5:18
        (UISystem system, UIElement root, UIForia.Elements.UIElement parent) => {
            TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate element;
            UIForia.Compilers.SlotOverride[] slotOverrides;
            UIForia.Compilers.TemplateData templateData;

            element = new TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate();
            templateData = system.GetTemplateData(typeof(TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate));
            // setup binding here

            SizedList<SlotOverride> overrides = system.GetOverrides(4);
            system.InitializeHydratedElement(element, 2); // 2 slots available for override
            system.OverrideSlot();
            system.OverrideSlot();
            system.ForwardSlot("title", data, 1);
            system.HydrateElement(element, data, 0, 0);

            // need
                // root element 
                // slot stack
                // context stack
                // required references for slot bindings = crawl context stack upwards by depth from lowest depth
                // or if we have template root refs -> walk upwards depth steps

            // forward looks at parent hydrate scope and reads off that
            // if not found push self

            // if loading lazy and has slots forwards or defines need to resolve results before stopping
            // so we create the correct slots when we boot again
            // also need the context referencess along the way

            //  templateData.hydrate(system, element);

            // in hydrate
            // root = system.contextStack.Peek();
            // system.AddSlotChild("slotName", data, 4);

            return element;
        }
    }
};
// ExpandedTemplate.xml
new UIForia.Compilers.TemplateData ("ExpandedTemplate") {
    entry = (UIForia.ElementSystem system) => {
        TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate element;
        UIForia.Compilers.TemplateData data;
        UIForia.Compilers.TemplateScope2 scope;

        data = system.GetTemplateData(typeof(TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate));
        element = new TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate();
        scope = new UIForia.Compilers.TemplateScope2(system, data, element, default(UIForia.Compilers.SlotOverride[]));
        system.InitializeEntryPoint(element, 0, 2);
        data.hydrate(system, element, default(UIForia.Compilers.SlotOverride[]));
        return element;
    },
    hydrate = (UIForia.ElementSystem system, UIForia.Elements.UIElement element) => {
        UIForia.Compilers.TemplateData data;
        UIForia.Compilers.TemplateScope2 scope;

        data = system.GetTemplateData(typeof(TemplateCompiler2Test.TestTemplateCompiler2.ExpandedTemplate));

        // lazy
        bindingNode.lazy = data.lazy[4];

        system.AddChild(element, data, 0);        // Text;

        system.ForwardSlot(element, data, "title", 4);

        system.AddChild(element, data, 6);

        system.AddSlotChild(element, overrides, @"title", 0);

    },
    elements = new System.Func<UIForia.Compilers.TemplateScope2, UIForia.Elements.UIElement, UIForia.Elements.UIElement>[] {
        //0 <Text> line 5:10
        (ElementSystem system, UIForia.Elements.UIElement parent) => {
            UIForia.Elements.UITextElement element;

            element = new UIForia.Elements.UITextElement();
            system.InitializeElement(parent, element, 0, 0);
            return element;
        }
    }
};
