<?xml version="1.0" encoding="utf-8"?>

<UITemplate>
    <Import path="./thing" as="blah"/>
    <Style>
        
        Text {
            fontSize: 11px;
            fontAsset: url(path/to/asset.font)
        }
        
        Material {
            backgroundColor: blue;
            borderStyle
            borderRadius
            backgroundImage
            material: url(path/to/material.mat)
            backgroundFill
            backgroundTile
            shadow
            opacity
            visibility
        }
        
        Animations {
            
        }
        
        Transform {
            relativeTo: View | Parent | Canvas | TemplateRoot    
            offsetX
            offsetY
            rotation
            scale
        }
        
        Size {
            padding:
            margin:
            border:
            width:
            height:
        }
        
        Layout {
            type: Flex | Grid | Radial | None
            alignmentMainAxis
            alignmentCrossAxis
            direction
            wrap
            ...grid properties
        }
        
        LayoutItem {         
            inFlow: false
            minWidth: 300px
            maxWidth: 200px;
            minHeight: 
            maxHeight:
            grow: 1
            shrink 1
            basisWidth = parent(40%)
            basisHeight = content(100%)
            
            ancestor:hover {
        
            }
        
            parent:hover {
            
            }
            
            parent:mouseEnter {}
        }
        
    </Style>
    <Contents>
        <Spec.Props.Test1Thing intValue="{value}"/>

        <Switch value="{someEnum}">

            <Case id="Constant.Value0">Text here</Case>

            <Case id="Constant.Value1">Text here</Case>

            <Case id="Constant.Value2">Text here</Case>

            <Case id="Constant.Value3">Text here</Case>

            <Default>Text here</Default>
            
        </Switch>

        <Repeat filter="" list="{valueList}" alias="item" onItemMoved="{}" onItemAdded="{}" onItemRemoved="{}">
            {item.something :: someObservedProperty} -- only check for updates when property changed
            {someRootProperty}
            {valuelist[$i].y}
            {$valueListLength}
        </Repeat>

        <Repeat list="{item.things}">
            {item.more.thing[value].x}
            <UIImage src="{item.basePath + root.path}"/>
            <Slot id="1"/>
        </Repeat>

    </Contents>
</UITemplate>

        <!--/*-->
        <!--* Grammar-->
        <!--*     ConstantStatement = Constant-->
        <!--*     ExpressionStatement = { Expression }-->
        <!--*     Constant = String | Boolean | Number-->
        <!--*     ValueExpression = Lookup | PropertyAccess | ArrayAccess | Constant-->
        <!--*     Lookup = Identifier-->
        <!--*     PropertyAccess = Identifier . (Identifier+)-->
        <!--*     ArrayAccess = Identifier [ Expression ]-->
        <!--*     Operator = ValueExpression Operator ValueExpression-->
        <!--*     Expression = ValueExpression ?(Operator Expression)*-->
        <!--*     MethodExpression = Identifier (ParameterList)-->
        <!--*     ParameterList = Expression (, Expression)*-->
        <!--*/-->